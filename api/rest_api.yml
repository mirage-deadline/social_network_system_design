openapi: 3.0.3

info:
  title: Social Network API
  contact:
    email: dmitrio.skripka@gmail.com
  version: 1.0.0


tags:
  - name: posts
  - name: comments
  - name: ratings
  - name: subscriptions
  - name: media
  - name: spots


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreatePostRequest:
      type: object
      description: Request to create a new post
      required:
        - text
      properties:
        text:
          type: string
          maxLength: 500
          description: Post text
          example: "New post"
        img_id:
          type: string
          format: int64
          nullable: true
          description: Identifier of a pre-uploaded image
          example: "4567891230"
        geo:
          type: string
          maxLength: 100
          nullable: true
          description: Geographic data
          example: "55.7558,37.6173"
    PostResponse:
      type: object
      description: Response model for a created or retrieved post
      properties:
        post_id:
          type: string
          format: uuid
          description: Unique post identifier, generated by the backend
          example: "123e4567-e89b-12d3-a456-426614174000"
        text:
          type: string
          maxLength: 500
          description: Post text
          example: "New post"
        img_id:
          type: string
          format: int64
          nullable: true
          description: Image identifier
          example: "4567891230"
        geo:
          type: string
          maxLength: 100
          nullable: true
          description: Geographic data
          example: "55.7558,37.6173"
        created_at:
          type: string
          format: int64
          description: Post creation time in Unix Timestamp format, generated by the backend
          example: "1677654321"
    GetPostsResponse:
      type: array
      description: List of posts
      items:
        $ref: '#/components/schemas/PostResponse'

    PatchPostRequest:
      type: object
      description: Request to partially update a post
      properties:
        text:
          type: string
          maxLength: 500
          nullable: true
          description: Updated post text, optional
          example: "Updated post text"
        img_id:
          type: string
          format: int64
          nullable: true
          description: Updated identifier of a pre-uploaded image, optional
          example: "7891234560"
        geo:
          type: string
          maxLength: 100
          nullable: true
          description: Updated geographic data, optional
          example: "55.7558,37.6173"

    PatchPostResponse:
      type: object
      description: Response model for an updated post
      properties:
        post_id:
          type: string
          format: uuid
          description: Unique post identifier, generated by the backend
          example: "123e4567-e89b-12d3-a456-426614174000"
        text:
          type: string
          maxLength: 500
          description: Updated post text (up to 500 bytes)
          example: "Updated post text"
        img_id:
          type: string
          format: int64
          nullable: true
          description: Image identifier (8 bytes), if present
          example: "7891234560"
        geo:
          type: string
          maxLength: 100
          nullable: true
          description: Geographic data (up to 100 bytes), if provided
          example: "40.7128,-74.0060"
        created_at:
          type: string
          format: int64
          description: Post creation time in Unix Timestamp format (8 bytes)
          example: "1677654321"

    CreateCommentRequest:
      type: object
      description: Request to create a new comment
      required:
        - post_id
        - text
      properties:
        post_id:
          type: string
          format: uuid
          description: Identifier of the post to which the comment belongs
          example: "123e4567-e89b-12d3-a456-426614174000"
        text:
          type: string
          maxLength: 250
          description: Comment text
          example: "Great post!"

    CommentResponse:
      type: object
      description: Response model for a single comment
      properties:
        id:
          type: string
          format: uuid
          description: Unique comment identifier, generated by the backend
          example: "550e8400-e29b-41d4-a716-446655440000"
        post_id:
          type: string
          format: uuid
          description: Identifier of the post to which the comment belongs
          example: "123e4567-e89b-12d3-a456-426614174000"
        author_id:
          type: string
          format: int64
          description: Identifier of the comment author, derived from the Bearer token
          example: "9876543210"
        text:
          type: string
          maxLength: 250
          description: Comment text
          example: "Great post!"
        created_at:
          type: string
          format: int64
          description: Comment creation time in Unix Timestamp format, generated by the backend
          example: "1677654321"

    UpdateCommentRequest:
      type: object
      description: Request to update a comment
      required:
        - text
      properties:
        text:
          type: string
          description: Updated comment text
          example: "Updated comment text"

    GetCommentsResponse:
      type: array
      description: List of posts
      items:
        $ref: '#/components/schemas/CommentResponse'

    CreateRatingRequest:
      type: object
      description: Request to create a new rating
      required:
        - post_id
        - value
      properties:
        post_id:
          type: string
          format: uuid
          description: Identifier of the post to rate
          example: "123e4567-e89b-12d3-a456-426614174000"
        value:
          type: integer
          format: int8
          description: Rating value
          example: 1

    RatingResponse:
      type: object
      description: Response model for a single rating
      properties:
        id:
          type: string
          format: uuid
          description: Unique rating identifier, generated by the backend
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        post_id:
          type: string
          format: uuid
          description: Identifier of the post being rated
          example: "123e4567-e89b-12d3-a456-426614174000"
        author_id:
          type: string
          format: int64
          description: Identifier of the rating author, derived from the Bearer token
          example: "9876543210"
        value:
          type: integer
          format: int8
          description: Rating value
          example: 1
        created_at:
          type: string
          format: int64
          description: Rating creation time in Unix Timestamp format, generated by the backend
          example: "1677654321"

    RatingsList:
      type: array
      description: List of ratings
      items:
        $ref: '#/components/schemas/RatingResponse'

    UpdateRatingRequest:
      type: object
      description: Request to update a rating
      required:
        - value
      properties:
        value:
          type: integer
          format: int8
          description: Updated rating value
          example: 3

    CreateSubscriptionRequest:
      type: object
      description: Request to create a new subscription
      required:
        - target_id
      properties:
        target_id:
          type: string
          format: int64
          description: Identifier of the user to subscribe to
          example: "1234567890"

    UnsubscribtionRequest:
      type: object
      description: Request to unsubscribe
      required:
        - target_id
      properties:
        target_id:
          type: string
          format: int64
          description: Identifier of the user to unsubscribe from
          example: "1234567890"

    UploadMediaResponse:
      type: object
      description: Response model for a successfully uploaded media file
      properties:
        media_id:
          type: string
          format: uuid
          description: Unique identifier of the uploaded media
          example: "7790beb1-48e8-42ae-8017-d24a8180bee4"

    SpotsList:
      type: object
      properties:
        spots:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the spot
              name:
                type: string
                description: Name of the spot
              geo:
                type: string
                example: "37.7749,-122.4194"
        total:
          type: integer
          description: Total number of spots available


paths:
  /posts:
    post:
      tags:
        - posts
      summary: Create a new post
      security:
        - BearerAuth: []
      requestBody:
        description: Post creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized (invalid or missing JWT token)
        '500':
          description: Internal server error
    get:
      tags:
        - posts
      summary: Get Posts
      description: Get posts by user_id or geo
      parameters:
        - name: user_id
          in: query
          description: User Id
          schema:
            type: string
            format: uuid
        - name: location_id
          in: query
          description: Location Id
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Limit for pagination
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        '422':
          description: Validation error on input data
        '500':
          description: Internal server error
  /posts/{post_id}:
    patch:
      tags:
        - posts
      summary: Update a post
      security:
        - BearerAuth: []
      description: Partially updates a post identified by post_id with the provided fields. Author context is derived from the Bearer token.
      parameters:
        - name: post_id
          in: path
          description: Unique identifier of the post to update
          required: true
          schema:
            type: string
            format: int64
            example: 10
      requestBody:
        description: Fields to update in the post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchPostResponse'
        '404':
          description: Post not found
        '422':
          description: Validation error on input data (e.g., text exceeds 500 bytes)
        '500':
          description: Internal server error
    delete:
      tags:
        - posts
      summary: Delete a post
      security:
        - BearerAuth: []
      description: Deletes a post identified by post_id. Author context is derived from the Bearer token.
      parameters:
        - name: post_id
          in: path
          description: Unique identifier of the post to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 1234567890
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found
        '422':
          description: Validation error on input data (e.g., invalid post_id)
        '500':
          description: Internal server error

  /comments:
    post:
      tags:
        - comments
      summary: Create a new comment
      security:
        - BearerAuth: []
      description: Creates a new comment for a specified post. Author ID is extracted from the Bearer token.
      requestBody:
        description: Comment creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /comments/{comment_id}:
    put:
      tags:
        - comments
      summary: Update a comment
      description: Updates a comment identified by comment_id with the provided text. Author context is derived from the Bearer token.
      operationId: updateComment
      security:
        - BearerAuth: []
      parameters:
        - name: comment_id
          in: path
          description: Unique identifier of the comment to update
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        description: Updated comment text
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Comment not found
        '422':
          description: Validation error on input data (e.g., invalid text)
        '500':
          description: Internal server error

    delete:
      tags:
        - comments
      summary: Delete a comment
      description: Deletes a comment identified by comment_id. Author context is derived from the Bearer token.
      operationId: deleteComment
      security:
        - BearerAuth: []
      parameters:
        - name: comment_id
          in: path
          description: Unique identifier of the comment to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Comment not found
        '422':
          description: Validation error on input data (e.g., invalid comment_id)
        '500':
          description: Internal server error

  /comments/{post_id}:
    get:
      tags:
        - comments
      summary: Get comments by post ID
      description: Retrieves a list of comments for a specified post, identified by post_id. Author context is derived from the Bearer token.
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: Unique identifier of the post to retrieve comments for
          required: true
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: List of comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCommentsResponse'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /ratings:
    post:
      tags:
        - ratings
      summary: Create a new rating
      description: Creates a new rating for a specified post. Author ID is extracted from the Bearer token.
      operationId: createRating
      security:
        - BearerAuth: []
      requestBody:
        description: Rating creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRatingRequest'
      responses:
        '201':
          description: Rating created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '422':
          description: Validation error on input data (e.g., invalid value or post_id)
        '500':
          description: Internal server error

    get:
      tags:
        - ratings
      summary: Get ratings
      description: Retrieves a list of ratings filtered by post_id, with pagination support. Author context is derived from the Bearer token.
      operationId: getRatings
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: query
          description: Unique identifier of the post to filter ratings
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
        - name: limit
          in: query
          description: Maximum number of ratings to return (pagination)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: offset
          in: query
          description: Number of ratings to skip (pagination)
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
      responses:
        '200':
          description: List of ratings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingsList'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '422':
          description: Validation error on input data (e.g., invalid post_id or limit)
        '500':
          description: Internal server error

  /ratings/{rating_id}:
    put:
      tags:
        - ratings
      summary: Update a rating
      description: Updates a rating identified by rating_id with the provided value. Author context is derived from the Bearer token.
      operationId: updateRating
      security:
        - BearerAuth: []
      parameters:
        - name: rating_id
          in: path
          description: Unique identifier of the rating to update
          required: true
          schema:
            type: string
            format: uuid
            example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
      requestBody:
        description: Updated rating value
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRatingRequest'
      responses:
        '200':
          description: Rating updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Rating not found
        '422':
          description: Validation error on input data (e.g., invalid value)
        '500':
          description: Internal server error

    delete:
      tags:
        - ratings
      summary: Delete a rating
      description: Deletes a rating identified by rating_id. Author context is derived from the Bearer token.
      operationId: deleteRating
      security:
        - BearerAuth: []
      parameters:
        - name: rating_id
          in: path
          description: Unique identifier of the rating to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
      responses:
        '204':
          description: Rating deleted successfully
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Rating not found
        '422':
          description: Validation error on input data (e.g., invalid rating_id)
        '500':
          description: Internal server error

  /subscription:
    post:
      tags:
        - subscriptions
      summary: Create a new subscription
      description: Subscribes the authenticated user to a target user. Subscriber ID is extracted from the Bearer token.
      operationId: createSubscription
      security:
        - BearerAuth: []
      requestBody:
        description: Subscription creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
      responses:
        '204':
          description: Subscription created successfully
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Target user not found
        '422':
          description: Validation error on input data (e.g., invalid target_id)
        '500':
          description: Internal server error

  /unsubscription:
    post:
      tags:
        - subscriptions
      summary: Unsubscribe
      description: Unsubscribes the authenticated user from a target user. Subscriber ID is extracted from the Bearer token.
      operationId: deleteSubscription
      security:
        - BearerAuth: []
      requestBody:
        description: Unsubscription request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsubscribtionRequest'
      responses:
        '204':
          description: Unsubscription successful
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '404':
          description: Target user not found
        '422':
          description: Validation error on input data (e.g., invalid target_id)
        '500':
          description: Internal server error

  /media:
    post:
      tags:
        - media
      summary: Upload media
      description: Uploads a binary media file (e.g., image, video) and returns a unique media ID. Author context is derived from the Bearer token.
      operationId: uploadMedia
      security:
        - BearerAuth: []
      requestBody:
        description: Binary media file to upload
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Raw binary data of the media file
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadMediaResponse'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '422':
          description: Validation error on input data (e.g., invalid file format)
        '500':
          description: Internal server error

  /spots:
    get:
      tags:
        - spots
      summary: Retrieve a list of locations
      security:
        - BearerAuth: []
      description: Returns a list of locations based on search criteria or geographic coordinates. Either a query string or geo coordinates can be provided for filtering.
      operationId: getLocations
      parameters:
        - name: query
          in: query
          description: Search term for location names or addresses (e.g., "New York", "Main Street")
          required: false
          schema:
            type: string
            maxLength: 200
            example: "San Francisco"
        - name: geo
          in: query
          description: Geographic coordinates in the format "latitude,longitude" (e.g., "37.7749,-122.4194")
          required: false
          schema:
            type: string
            example: "37.7749,-122.4194"
        - name: limit
          in: query
          description: Maximum number of locations to return per request
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: offset
          in: query
          description: Number of locations to skip for pagination
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
      responses:
        '200':
          description: Successfully retrieved locations list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotsList'
        '401':
          description: Unauthorized (invalid or missing Bearer token)
        '422':
          description: Validation error due to malformed input data
        '404':
          description: No locations found matching the criteria
        '500':
          description: Internal server error
